VIM NOTES


Modes

	The "Vi's modes" is the key feature of Vi, if you're using Vim or other derivative the current mode is indicated
	into the lower-left corner of the terminal.

	Pressing ESCAPE from every mode exept NORMAL will cause the return to NORMAL mode, is the only way to exit from INSERT mode 


		NORMAL		The standard mode, here you can navigate trought the text and use commands

		INSERT		The insert mode, you can toggle it using a variety of different metods, used for actual typing

		VISUAL		The visual mode, permit text selection, useful for multi-line action like yank or cut

		REPLACE		The replace mode, permit to overwrite text


Movement

		h			left
		l			right
		j			down
		k			up
		b			one word backword
		B			backword till next space
		w			to the beginning of the next word
		W			to the beginning of the next WORD (sequence of chars without spaces)
		e			to the end of the next word
		E			to the end of the next WORD (sequence of chars without spaces)
		)			to the next sentence
		(			to the previous sentence
		}			to the next paragraph
		{			to the previous paragraph
		$			go to the end of a row
		gg			go to the beginning of the file
		G			go to the end of the file
		0			go to the beginning of a row
		^			go to the first not-blank char of a row (spaces, tabs)
		H			go to the top of the screen
		M			go to the middle of the screen
		L			go to the bottom of the screen
		``			return to the previous cursor position where he was before the last jump
		''			return to the previous line where the cursor was before the last jump
		'.			return to the beginning (excluding spaces and tabs) of the last edited line


General command

		d			cut selected
		D			cut single char
		dd			cut row
		c			cut selected and then toggle insert mode
		p			paste
		P			paste over the selected row
		x			delete one char on the right
		u			undo
		ctrl+r		undo the undo
		U			undo command
		UU			undo the undo command
		a			append one char the the right and toggle insert mode
		A			append at the row and toggle insert mode
		o			create a new line below the selected one and toggle insert mode
		O			create a new line over the selected one and toggle insert mode
		i			toggle insert mode
		I			toggle insert mode at the beginning of the row
		v			toggle visual mode
		V			toggle visual mode and select the entire row
		r			toggle replace mode
		R			toggle replace mode for more than one char
		s			toggle insert mode on the selcted char erasing it
		S			toggle insert mode one tab after the beginning of the row, erasing the current row

		:show		show the current mode


Regex
	
	General

		pattern					just the pattern, even if is only a portion of a bigger string
		pattern (with spaces)	the pattern isolated from the rest of the text
		$						last char of a row
		^						first char of a row
		\< \>					an indefinite number of chars
		[]						any char from the group between the two brackets
		.						any char except newline

	Escaped

		\s						whitespace
		\S						non-whitespace
		\d						digit
		\D						non-digit
		\x						hex digit
		\X						non-hex digit
		\o						octal digit
		\O						non-octal digit
		\h						head of word (a,b,c...,A,B,C,...,_)
		\H						non-head of word
		\p						printable chars
		\P						printable chars excluding digits
		\w						word char
		\W						non-word character
		\a						alphabetic char
		\A						non-alphabetic char
		\l						lowercase char
		\L						non-lowercase char
		\u						uppercase char
		\U						non-uppercase char


Saving, exit and so on

		:wa						writes all changes to the respective files
		:xa						save all files and then quit
		:wqa					same as before
		:qa						quit all (fails if there's any unsaved file)
		:qa!					quit all (forced)
		:n						edit the alternate file
		:e [file/number]		edit the selected file / edit the alternate file corresponding to the number
		:! [shell cmd]			redirect the command to the shell, displayng the output
		:!r [shell cmd]			redirect the command to the shell, writing the output on the file


Search and Sobstitute

		:Range s/PATTERN/STRING/Option

			Option

				c	confirm before each substitution
				g	replace multiple occurrences of PATTERN per line (else it replace only the first)
				i	ignore case
				I	don't case sensitive

			Range (manage where the command will apply)

				number		absolute number of the row
				.			current line
				$			the last line in the  file
				%			the whole file
				\/			the next line where the last searched pattern was
				\?			the previously line where the last searched pattern was
				\&			the next line where the last substituted pattern was

			NB: A range can be specified by a sequence of two parameters divided by a comma (Es		1,4		.,$)

			Pattern

				follows the standard vim regex rules


Split

	General

		:split		split the tab horizzontally with the selected file, use the same file if no argument is given
		:vsplit		split the tab vertically with the selected file, use the same file if no argument is given

	Resize

		:resize [nRow]			resize a splitted panel to the selected number of row
		:vertical resize [nRow]	resize a vertical splitted panel to the selected number of row
		:resize [+-][nRow]			resize a splitted panel by the selected number of row
		:vertical resize [+-][nRow]	resize a vertical splitted panel by the selected number of row

	Movement

		ctrl+w+h	go left to the next splitted region
		ctrl+w+j	go down to the next splitted region
		ctrl+w+k	go up to the next splitted region
		ctrl+w+l	go right to the next splitted region
		ctrl+ww		cycle trought the different splitted regions


Tabs

	vim -p file1 file2 file3		(from text interface) open the N files into N different tabs

	Creation/Managment

		:tabedit [file]				edit specified file in a new tab
		:tabfind [file]				open a new tab with filename given, searching the 'path' to find it
		:tabclose					close current tab
		:tabclose [i]				close i-th tab
		:tabonly					close all other tabs (show only the current tab)

		:tab ball					show each buffer in a tab (up to 'tabpagemax' tabs)
		:tab help					open a new help window in its own tab page
		:tab drop [file]			open {file} in a new tab, or jump to a window/tab containing the file if there is one
		:tab split					copy the current window to a new tab of its own

	Moving tabs around

		:tabs						list all tabs including their displayed windows
		:tabm 0						move current tab to first
		:tabm						move current tab to last
		:tabm [i]					move current tab to position i+1

		:tabn						go to next tab
		:tabp						go to previous tab
		:tabfirst					go to first tab
		:tablast					go to last tab

	Navigation

			gt					go to next tab
			gT					go to previous tab
			[i]gt				go to tab in position i
			ctrl+PgDn			go to next tab
			ctrl+PgUp			go to previous tab

	NB: tabe==tabedit, if the typed string is univoce works as the maching command


Sessions

	Creation

		:mksession [path/to/file.vim]			create a vim script that contains the current session

	Load

		:source	[path/to/file.vim]				load a Vim script that contains the sessions data


Scripting

	Creation

		Just write a script using Vi's scripting language and save it as a .vim file

	Load

		:source [path/to/file.vim]				load a Vim script

